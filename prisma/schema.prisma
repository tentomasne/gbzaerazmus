// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(EDITOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  articles Article[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Article {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  excerpt     String?
  slug        String        @unique
  status      ArticleStatus @default(DRAFT)
  country     String?
  tags        String[]      @default([])
  coverImage  String?
  authorId    String        @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  publishedAt DateTime?

  author User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  images Image[]

  @@map("articles")
}

model Image {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  filename     String
  originalName String
  path         String
  size         Int
  mimeType     String
  articleId    String?  @db.ObjectId
  uploadedAt   DateTime @default(now())

  article Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("images")
}

enum Role {
  EDITOR
  ADMIN
}

enum ArticleStatus {
  DRAFT
  PENDING
  PUBLISHED
  REJECTED
}